version: 2
jobs:

  build:
    environment:
      TZ: "/usr/share/zoneinfo/America/Los_Angeles"
    machine:
      image: ubuntu-2004:202010-01
    working_directory: /tmp/src/fmriprep-rodents
    steps:
      - checkout
      - run:
          name: Check whether build should be skipped
          command: |
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi

      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ epoch }}
            - build-v1-{{ .Branch }}-
            - build-v1-master-
            - build-v1-
          paths:
            - /tmp/docker
      - run:
          name: Set up Docker registry
          command: |
            docker run -d -p 5000:5000 --restart=always --name=registry \
                -v /tmp/docker:/var/lib/registry registry:2
      - run:
          name: Pull images
          command: |
            set +e
            docker pull localhost:5000/ubuntu
            success=$?
            set -e
            if [[ "$success" = "0" ]]; then
                echo "Pulling from local registry"
                docker tag localhost:5000/ubuntu ubuntu:xenial-20200114
                docker pull localhost:5000/fmriprep-rodents
                docker tag localhost:5000/fmriprep-rodents poldracklab/fmriprep-rodents:latest
                docker tag localhost:5000/fmriprep-rodents poldracklab/fmriprep-rodents
            else
                echo "Pulling from Docker Hub"
                docker pull ubuntu:xenial-20200114
                docker tag ubuntu:xenial-20200114 localhost:5000/ubuntu
                docker push localhost:5000/ubuntu
                docker pull poldracklab/fmriprep-rodents:latest || (
                        docker pull poldracklab/fmriprep:latest &&
                        docker tag poldracklab/fmriprep:latest poldracklab/fmriprep-rodents:latest
                        )
            fi
      - run:
          name: Build Docker image
          no_output_timeout: 60m
          command: |
            export PY3=$(pyenv versions | grep '3\.' |
                         sed -e 's/.* 3\./3./' -e 's/ .*//')
            pyenv local $PY3
            pip install "setuptools >= 40.8.0"
            # Get version, update files.
            THISVERSION=$( python3 setup.py --version )
            if [[ ${THISVERSION:0:1} == "0" ]] ; then
              echo "WARNING: latest git tag could not be found"
              echo "Please, make sure you fetch all tags from upstream with"
              echo "the command ``git fetch --tags --verbose`` and push"
              echo "them to your fork with ``git push origin --tags``"
            fi
            sed -i -E "s/(var version = )'[A-Za-z0-9.-]+'/\1'${CIRCLE_TAG:-$THISVERSION}'/" docs/citing.rst
            sed -i "s/title = {FMRIPrep}/title = {FMRIPrep ${CIRCLE_TAG:-$THISVERSION}}/" fprodents/data/boilerplate.bib
            # Build docker image
            e=1 && for i in {1..5}; do
              docker build --rm \
                --cache-from=poldracklab/fmriprep-rodents \
                -t poldracklab/fmriprep-rodents:latest \
                --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --build-arg VCS_REF=`git rev-parse --short HEAD` \
                --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" . \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]
      - run:
          name: Docker push to local registry
          no_output_timeout: 40m
          command: |
            docker tag poldracklab/fmriprep-rodents:latest localhost:5000/fmriprep-rodents
            docker push localhost:5000/fmriprep-rodents
      - run:
          name: Docker registry garbage collection
          command: |
            docker exec -it registry /bin/registry garbage-collect --delete-untagged \
              /etc/docker/registry/config.yml

      - persist_to_workspace:
          root: /tmp
          paths:
            - src/fmriprep-rodents
      - save_cache:
         key: build-v1-{{ .Branch }}-{{ epoch }}
         paths:
            - /tmp/docker

  get_data:
    docker:
      - image: continuumio/miniconda3:4.9.2-alpine
    working_directory: /tmp/data
    environment:
      - TEMPLATEFLOW_HOME: /tmp/templateflow
    steps:
      - restore_cache:
          keys:
            - env-v0-{{ .Branch }}-
            - env-v0-master-
            - env-v0-
      - run:
          name: Setup git-annex & DataLad
          command: |
            conda install -y -c anaconda -c conda-forge git-annex datalad
            python -m pip install --no-cache-dir -U datalad-osf
            git config --global user.name 'NiPreps Bot'
            git config --global user.email 'nipreps@gmail.com'
      - run:
          name: Setup TemplateFlow
          command: |
            python -m pip install --no-cache-dir -U templateflow
            python -c "from templateflow import api as tfapi; \
                       tfapi.get('Fischer344');"
      - save_cache:
          key: env-v0-{{ .Branch }}-{{ .BuildNum }}
          paths:
            - /tmp/templateflow
            - /opt/conda

      - restore_cache:
          keys:
            - data-se-v0-{{ .Branch }}-{{ .Revision }}-
            - data-se-v0-{{ .Branch }}-
            - data-se-v0-master-
            - data-se-v0-
      - run:
          name: Install Rodent BOLD/SE dataset
          command: |
            datalad install -r https://github.com/nipreps-data/nirodents-bold-se.git
            datalad update -r --merge -d nirodents-bold-se/
            datalad get -J 2 -r -d nirodents-bold-se nirodents-bold-se/*
      - save_cache:
          key: data-se-v0-{{ .Branch }}-{{ .Revision }}-{{ epoch }}
          paths:
            - /tmp/data/nirodents-bold-se

      - run:
          name: Store FreeSurfer license file
          command: |
            mkdir -p /tmp/fslicense
            cd /tmp/fslicense
            echo "cHJpbnRmICJrcnp5c3p0b2YuZ29yZ29sZXdza2lAZ21haWwuY29tXG41MTcyXG4gKkN2dW12RVYzelRmZ1xuRlM1Si8yYzFhZ2c0RVxuIiA+IGxpY2Vuc2UudHh0Cg==" | base64 -d | sh
      - run:
          name: Create Nipype config files
          command: |
            mkdir -p /tmp/config
            printf "[execution]\nstop_on_first_crash = true\n" > /tmp/config/nipype.cfg
            echo "poll_sleep_duration = 0.01" >> /tmp/config/nipype.cfg
            echo "hash_method = content" >> /tmp/config/nipype.cfg
      - persist_to_workspace:
          root: /tmp
          paths:
            - templateflow
            - fslicense
            - config/nipype.cfg

  smoke_test:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/rodent-se
    environment:
      - FS_LICENSE: /tmp/fslicense/license.txt
      - DATASET: nirodents-bold-se
    steps:
      - checkout:
          path: /home/circleci/src/fmriprep-rodents
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/fmriprep-rodents
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?tests\]' )" != "" ]]; then
              echo "Skipping pytest job"
              circleci step halt
            fi

      - attach_workspace:
          at: /tmp
      - restore_cache:
          keys:
            - build-v1-{{ .Branch }}-{{ epoch }}
            - build-v1-{{ .Branch }}-
            - build-v1-
          paths:
            - /tmp/docker
      - run:
          name: Set-up a Docker registry
          command: |
            docker run -d -p 5000:5000 --restart=always --name=registry \
                -v /tmp/docker:/var/lib/registry registry:2
      - run:
          name: Pull images from local registry
          command: |
            docker pull localhost:5000/fmriprep-rodents
            docker tag localhost:5000/fmriprep-rodents poldracklab/fmriprep-rodents:latest

      - restore_cache:
          keys:
            - data-se-v0-{{ .Branch }}-{{ .Revision }}-{{ epoch }}
            - data-se-v0-{{ .Branch }}-{{ .Revision }}-
            - data-se-v0-{{ .Branch }}-
            - data-se-v0-
      - restore_cache:
          keys:
            - nirodents-bold-se-anat-v01-{{ .Branch }}-{{ .Revision }}
            - nirodents-bold-se-anat-v01-{{ .Branch }}
            - nirodents-bold-se-anat-v01-master
            - nirodents-bold-se-anat-v01-
      - run:
          name: Run anatomical workflow on rodents
          no_output_timeout: 2h
          command: |
            mkdir -p /tmp/${DATASET}/work /tmp/${DATASET}/anatomical
            docker run -e FS_LICENSE=$FS_LICENSE -e FMRIPREP_DEV=1 --rm \
                -v /tmp/data/${DATASET}:/data \
                -v /tmp/${DATASET}/anatomical:/out \
                -v /tmp/fslicense/license.txt:/tmp/fslicense/license.txt:ro \
                -v /tmp/config/nipype.cfg:/home/fmriprep/.nipype/nipype.cfg \
                -v /tmp/templateflow:/home/fmriprep/.cache/templateflow \
                -v /tmp/${DATASET}/work:/work \
                --user $(id -u):$(id -g) \
                poldracklab/fmriprep-rodents:latest /data /out participant -vv \
                -w /work --sloppy --anat-only \
                --notrack --skip-bids-validation --omp-nthreads 2 --nprocs 2
      - store_artifacts:
          path: /tmp/nirodents-bold-se/anatomical
      - save_cache:
         key: nirodents-bold-se-anat-v01-{{ .Branch }}-{{ .Revision }}-{{ epoch }}
         paths:
            - /tmp/nirodents-bold-se/work

      - run:
          name: Run full BOLD workflow on rodents
          no_output_timeout: 2h
          command: |
            mkdir -p /tmp/${DATASET}/derivatives
            docker run -e FS_LICENSE=$FS_LICENSE -e FMRIPREP_DEV=1 --rm \
                -v /tmp/data/${DATASET}:/data \
                -v /tmp/${DATASET}/derivatives:/out \
                -v /tmp/fslicense/license.txt:/tmp/fslicense/license.txt:ro \
                -v /tmp/config/nipype.cfg:/home/fmriprep/.nipype/nipype.cfg \
                -v /tmp/templateflow:/home/fmriprep/.cache/templateflow \
                -v /tmp/${DATASET}/work:/work \
                --user $(id -u):$(id -g) \
                poldracklab/fmriprep-rodents:latest /data /out participant -vv \
                -w /work --sloppy \
                --notrack --skip-bids-validation --omp-nthreads 2 --nprocs 2
      - store_artifacts:
          path: /tmp/nirodents-bold-se/derivatives

      - run:
          name: Clean working directory
          when: on_success
          command: |
            sudo rm -rf /tmp/nirodents-bold-se/work
      - run:
          name: Clean working directory
          when: on_fail
          command: |
            find /tmp/nirodents-bold-se/work \( -name "*.nii.gz" -or -name "*.nii" -or -name "*.gii" -or -name "*.h5" \) \
                -exec sh -c 'rm -f {}; touch {}' \;
      - store_artifacts:
          path: /tmp/nirodents-bold-se/work

  # test_pytest:
  #   machine:
  #     image: circleci/classic:201711-01
  #   working_directory: /tmp/src/fmriprep-rodents
  #   steps:
  #     - checkout:
  #         path: /home/circleci/src/fmriprep-rodents
  #     - run:
  #         name: Check whether build should be skipped
  #         command: |
  #           cd /home/circleci/src/fmriprep-rodents
  #           if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
  #             echo "Only docs build"
  #             circleci step halt
  #           fi
  #           if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?tests\]' )" != "" ]]; then
  #             echo "Skipping pytest job"
  #             circleci step halt
  #           fi

  #     - attach_workspace:
  #         at: /tmp
  #     - restore_cache:
  #         keys:
  #           - build-v1-{{ .Branch }}-{{ epoch }}
  #           - build-v1-{{ .Branch }}-
  #           - build-v1-
  #         paths:
  #           - /tmp/docker
  #     - restore_cache:
  #         keys:
  #           - data-se-v0-{{ .Branch }}-{{ .Revision }}
  #     - run:
  #         name: Set-up a Docker registry
  #         command: |
  #           docker run -d -p 5000:5000 --restart=always --name=registry \
  #               -v /tmp/docker:/var/lib/registry registry:2
  #     - run:
  #         name: Pull images from local registry
  #         command: |
  #           docker pull localhost:5000/fmriprep-rodents
  #           docker tag localhost:5000/fmriprep-rodents poldracklab/fmriprep-rodents:latest
  #     - run:
  #         name: Run fMRIPrep tests
  #         no_output_timeout: 2h
  #         command: |
  #           docker run -ti --rm=false \
  #             -e TEST_READONLY_FILESYSTEM=1 -v $HOME:/home/readonly:ro \
  #             --entrypoint="pytest" poldracklab/fmriprep-rodents:latest \
  #             /src/fmriprep/fprodents -svx --doctest-modules
  #     - store_artifacts:
  #         path: /tmp/data/reports

  # build_docs:
  #   docker:
  #     - image: python:3.7.4
  #   working_directory: /tmp/src/fmriprep-rodents
  #   environment:
  #     - FSLOUTPUTTYPE: 'NIFTI'
  #   steps:
  #     - checkout
  #     - run:
  #         name: Check whether build should be skipped
  #         command: |
  #           if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?docs\]' )" != "" ]]; then
  #             echo "Skipping doc building job"
  #             circleci step halt
  #           fi
  #     - run:
  #         name: Check Python version and upgrade pip
  #         command: |
  #           python --version
  #           python -m pip install -U pip
  #     - run:
  #         name: Install graphviz
  #         command: |
  #             apt-get update
  #             apt-get install -y graphviz
  #     - run:
  #         name: Install Requirements (may contain pinned versions)
  #         command: python -m pip install -r docs/requirements.txt
  #     - run:
  #         name: Install fMRIPrep
  #         command: python -m pip install ".[doc]"
  #     - run:
  #         name: Build documentation
  #         command: make SPHINXOPTS="-W" -C docs html
  #     - store_artifacts:
  #         path: /tmp/src/fmriprep-rodents/docs/_build/html

  # deploy_docker_patches:
  #   machine:
  #     image: circleci/classic:201711-01
  #   working_directory: /tmp/src/fmriprep-rodents
  #   steps:

  #     - run:
  #         name: Check whether image should be deployed to Docker Hub
  #         command: |
  #           if [[ "$CIRCLE_PROJECT_USERNAME" != "poldracklab" ]]; then
  #             echo "Nothing to deploy for $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME."
  #             circleci step halt
  #           fi
  #     - checkout:
  #         path: /home/circleci/src/fmriprep-rodents
  #     - run:
  #         name: Check whether build should be skipped
  #         command: |
  #           cd /home/circleci/src/fmriprep-rodents
  #           if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
  #             echo "Only docs build"
  #             circleci step halt
  #           fi
  #     - restore_cache:
  #         keys:
  #           - build-v1-{{ .Branch }}-{{ epoch }}
  #           - build-v1-{{ .Branch }}-
  #           - build-v1-
  #         paths:
  #           - /tmp/docker
  #     - run:
  #         name: Setup a Docker registry
  #         command: |
  #           docker run -d -p 5000:5000 --restart=always --name=registry \
  #             -v /tmp/docker:/var/lib/registry registry:2
  #     - run:
  #         name: Pull images from local registry
  #         command: |
  #           docker pull localhost:5000/fmriprep-rodents
  #           docker tag localhost:5000/fmriprep-rodents poldracklab/fmriprep-rodents:latest
  #     - run:
  #         name: Deploy to Docker Hub
  #         no_output_timeout: 40m
  #         command: |
  #           if [[ -n "$DOCKER_PASS" ]]; then
  #             docker login -u $DOCKER_USER -p $DOCKER_PASS
  #             docker tag poldracklab/fmriprep-rodents poldracklab/fmriprep-rodents:${CIRCLE_BRANCH#docker/}
  #             docker push poldracklab/fmriprep-rodents:${CIRCLE_BRANCH#docker/}
  #           fi

  # deploy_docker:
  #   machine:
  #     image: circleci/classic:201711-01
  #   working_directory: /tmp/src/fmriprep-rodents
  #   steps:
  #     - checkout:
  #         path: /home/circleci/src/fmriprep-rodents
  #     - run:
  #         name: Check whether build should be skipped
  #         command: |
  #           cd /home/circleci/src/fmriprep-rodents
  #           if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
  #             echo "Only docs build"
  #             circleci step halt
  #           fi
  #     - restore_cache:
  #         keys:
  #           - build-v1-{{ .Branch }}-{{ epoch }}
  #           - build-v1-{{ .Branch }}-
  #           - build-v1-
  #         paths:
  #           - /tmp/docker
  #     - run:
  #         name: Set-up a Docker registry
  #         command: |
  #           docker run -d -p 5000:5000 --restart=always --name=registry \
  #               -v /tmp/docker:/var/lib/registry registry:2
  #     - run:
  #         name: Pull images from local registry
  #         command: |
  #           docker pull localhost:5000/fmriprep-rodents
  #           docker tag localhost:5000/fmriprep-rodents poldracklab/fmriprep-rodents:latest
  #     - run:
  #         name: Deploy to Docker Hub
  #         no_output_timeout: 40m
  #         command: |
  #           if [[ -n "$DOCKER_PASS" ]]; then
  #             docker login -u $DOCKER_USER -p $DOCKER_PASS
  #             docker tag poldracklab/fmriprep-rodents poldracklab/fmriprep-rodents:unstable
  #             docker push poldracklab/fmriprep-rodents:unstable
  #             if [[ -n "$CIRCLE_TAG" ]]; then
  #               docker push poldracklab/fmriprep-rodents:latest
  #               docker tag poldracklab/fmriprep-rodents poldracklab/fmriprep-rodents:$CIRCLE_TAG
  #               docker push poldracklab/fmriprep-rodents:$CIRCLE_TAG
  #             fi
  #           fi

  # test_deploy_pypi:
  #   docker:
  #     - image: circleci/python:3.7.4
  #   working_directory: /tmp/src/fmriprep-rodents
  #   steps:
  #     - checkout
  #     - run:
  #         name: Build fMRIPrep
  #         command: |
  #           pip install --user twine  # For use in checking distributions
  #           THISVERSION=$( python setup.py --version )
  #           THISVERSION=${THISVERSION%.dirty*}
  #           THISVERSION=${CIRCLE_TAG:-$THISVERSION}
  #           virtualenv --python=python build
  #           source build/bin/activate
  #           pip install --upgrade "pip>=19.1" numpy
  #           echo "${CIRCLE_TAG:-$THISVERSION}" > fprodents/VERSION
  #           python setup.py sdist
  #           pip wheel --no-deps -w dist/ .
  #     - store_artifacts:
  #         path: /tmp/src/fmriprep-rodents/dist
  #     - run:
  #         name: Check sdist distribution
  #         command: |
  #           THISVERSION=$( python setup.py --version )
  #           THISVERSION=${THISVERSION%.dirty*}
  #           THISVERSION=${CIRCLE_TAG:-$THISVERSION}
  #           twine check dist/fmriprep*.tar.gz
  #           virtualenv --python=python sdist
  #           source sdist/bin/activate
  #           pip install --upgrade "pip>=19.1" numpy
  #           pip install dist/fmriprep*.tar.gz
  #           which fmriprep-rodents | grep sdist\\/bin
  #           INSTALLED_VERSION=$(fmriprep-rodents --version)
  #           INSTALLED_VERSION=${INSTALLED_VERSION%$'\r'}
  #           INSTALLED_VERSION=${INSTALLED_VERSION#*"fMRIPrep v"}
  #           echo "VERSION: \"$THISVERSION\""
  #           echo "INSTALLED: \"$INSTALLED_VERSION\""
  #           test "$INSTALLED_VERSION" = "$THISVERSION"
  #     - run:
  #         name: Check wheel distribution
  #         command: |
  #           THISVERSION=$( python setup.py --version )
  #           THISVERSION=${THISVERSION%.dirty*}
  #           THISVERSION=${CIRCLE_TAG:-$THISVERSION}
  #           twine check dist/fmriprep*.whl
  #           virtualenv --python=python wheel
  #           source wheel/bin/activate
  #           pip install dist/fmriprep*.whl
  #           which fmriprep-rodents | grep wheel\\/bin
  #           INSTALLED_VERSION=$(fmriprep-rodents --version)
  #           INSTALLED_VERSION=${INSTALLED_VERSION%$'\r'}
  #           INSTALLED_VERSION=${INSTALLED_VERSION#*"fMRIPrep v"}
  #           echo "VERSION: \"$THISVERSION\""
  #           echo "INSTALLED: \"$INSTALLED_VERSION\""
  #           test "$INSTALLED_VERSION" = "$THISVERSION"

  # deploy_pypi:
  #   docker:
  #     - image: circleci/python:3.7.4
  #   working_directory: /tmp/src/fmriprep-rodents
  #   steps:
  #     - checkout
  #     - run:
  #         name: Build fMRIPrep
  #         command: |
  #           THISVERSION=$( python setup.py --version )
  #           virtualenv --python=python build
  #           source build/bin/activate
  #           pip install --upgrade "pip>=19.1"
  #           echo "${CIRCLE_TAG:-$THISVERSION}" > fprodents/VERSION
  #           python setup.py sdist
  #           pip wheel --no-deps -w dist/ .
  #     - run:
  #         name: Upload packages to PyPI
  #         command: |
  #           pip install --user twine
  #           twine upload dist/fmriprep*

  # deployable:
  #   docker:
  #     - image: busybox:latest
  #   steps:
  #     - run: echo Deploying!

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
            tags:
              only: /.*/

      - get_data:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
                - /docker\/.*/
            tags:
              only: /.*/

      - smoke_test:
          requires:
            - get_data
            - build
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
                - /docker\/.*/
            tags:
              only: /.*/

      # - test_pytest:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         ignore:
      #           - /docs?\/.*/
      #           - /docker\/.*/
      #       tags:
      #         only: /.*/

      # - build_docs:
      #     filters:
      #       branches:
      #         ignore:
      #           - /tests?\/.*/
      #           - /docker\/.*/
      #       tags:
      #         only: /.*/

      # - test_deploy_pypi:
      #     filters:
      #       branches:
      #         ignore:
      #           - /docs\/.*/
      #           - /docker\/.*/
      #       tags:
      #         only: /.*/


      # - deploy_docker_patches:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only: /docker\/.*/

      # - deployable:
      #     requires:
      #       - test_deploy_pypi
      #       - test_pytest
      #       - build_docs
      #     filters:
      #       branches:
      #         only: master
      #       tags:
      #         only: /.*/

      # - deploy_docker:
      #     requires:
      #       - deployable
      #     filters:
      #       branches:
      #         only: master
      #       tags:
      #         only: /.*/

      # - deploy_pypi:
      #     requires:
      #       - deployable
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /.*/
